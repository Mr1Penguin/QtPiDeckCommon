name: Common lib workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  QTPI: 5.11.3
  QT5: 5.15.2
  QT6: 6.2.1
  VULKAN_VER: 1.2.189
  VULKAN_VER_FULL: 1.2.189.0

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Run clang-format
        run: |
          git diff --name-only $(git merge-base origin/master HEAD) HEAD |
          grep -E '\.((c|h)pp|inl)$' |
          xargs clang-format -style="file:.clang-format" -i

      - run: git diff > gitdiff

      - run: echo ::set-output name=gitdiffsize::$(stat gitdiff --format '%s')
        id: git-diff-check

      - run: echo ::set-output name=message::"clang-format check result\n\njob failed\n```diff\n$(cat git-diff-check)\n```\n"
        id: git-diff-text
        if: steps.git-diff-check.outputs.gitdiffsize != 0

      - uses: thollander/actions-comment-pull-request@v1
        with:
          message: steps.git-diff-text.outputs.message
          comment_includes: 'clang-format check result'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.git-diff-check.outputs.gitdiffsize != 0

      - uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            clang-format check result

            passed
          comment_includes: 'clang-format check result'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.git-diff-check.outputs.gitdiffsize == 0

      - name: Fail if there are changes
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('clang-format job failed')
        if: steps.git-diff-check.outputs.gitdiffsize != 0
        
  ubuntu-jobs-generator:
    needs: [clang-format]
    runs-on: ubuntu-latest
    outputs:
      job-matrix: ${{ steps.set-matrix.outputs.job-matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=job-matrix::{\"cfg\":[${uqpig8}, ${uqpig10}, ${uq5g8}, ${uq5g10}, ${uq6g8}]}"
        env:
          uqpig8: '{"qt":"${{ env.QTPI }}","cc":"gcc-8","cxx":"g++-8","triplet":"x64-linux"}'
          uqpig10: '{"qt":"${{ env.QTPI }}","cc":"gcc-10","cxx":"g++-10","triplet":"x64-linux"}'
          uq5g8: '{"qt":"${{ env.QT5 }}","cc":"gcc-8","cxx":"g++-8","triplet":"x64-linux"}'
          uq5g10: '{"qt":"${{ env.QT5 }}","cc":"gcc-10","cxx":"g++-10","triplet":"x64-linux"}'
          uq6g8: '{"qt":"${{ env.QT6 }}","cc":"gcc-10","cxx":"g++-10","triplet":"x64-linux"}'

  win-jobs-generator:
    needs: [clang-format]
    runs-on: ubuntu-latest
    outputs:
      job-matrix: ${{ steps.set-matrix.outputs.job-matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=job-matrix::{\"cfg\":[${wq5cl}, ${wq6cl}]}"
        env:
          wq5cl: '{"qt":"${{ env.QT5 }}","triplet":"x64-windows"}'
          wq6cl: '{"qt":"${{ env.QT6 }}","triplet":"x64-windows"}'

  mac-jobs-generator:
    needs: [clang-format]
    runs-on: ubuntu-latest
    outputs:
      job-matrix: ${{ steps.set-matrix.outputs.job-matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=job-matrix::{\"cfg\":[${mq5clang}, ${mq6clang}]}"
        env:
          mq5clang: '{"qt":"${{ env.QT5 }}","triplet":"x64-osx"}'
          mq6clang: '{"qt":"${{ env.QT6 }}","triplet":"x64-osx"}'

  ubuntu-test:
    needs: [ubuntu-jobs-generator]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.ubuntu-jobs-generator.outputs.job-matrix)}}
    
    name: Qt${{ matrix.cfg.qt }} - ${{ matrix.cfg.cc }}[ubuntu]

    steps:
      - uses: lukka/get-cmake@latest

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ubuntu-QtCache-${{ matrix.cfg.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          version: '${{ matrix.cfg.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.cfg.qt }} ubuntu-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.cfg.qt }} ubuntu-latest)"
        id: set-outputs

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ matrix.cfg.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.set-outputs.outputs.dependencies != 'nil'

      - name: Install gcc 8
        run: sudo apt-get install g++-8 -y
        if: matrix.cfg.cc == 'gcc-8'

      - name: Install additional Qt6 dependencies
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${VULKAN_VER}-focal.list https://packages.lunarg.com/vulkan/${VULKAN_VER}/lunarg-vulkan-${VULKAN_VER}-focal.list
          sudo apt update
          sudo apt install
          sudo apt install vulkan-sdk libxkbcommon-dev -y
        if: matrix.cfg.qt == env.QT6

      - name: Create build directory
        run: cmake -E make_directory "build"

      - run: cmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/ext/vcpkg/scripts/buildsystems/vcpkg.cmake
        env:
          CC: ${{ matrix.cfg.cc }}
          CXX: ${{ matrix.cfg.cxx }}

      - run: cmake --build build

      - name: Test project
        run: ctest --output-on-failure
        working-directory: build
        env:
          LD_LIBRARY_PATH: ./QtPiDeckCommon

  win-test:
    needs: [win-jobs-generator]
    runs-on: windows-latest
    strategy:
      matrix: ${{fromJSON(needs.win-jobs-generator.outputs.job-matrix)}}
    
    name: Qt${{ matrix.cfg.qt }} - msvc[windows]

    steps:
      - uses: lukka/get-cmake@latest

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: windows-QtCache-${{ matrix.cfg.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          version: '${{ matrix.cfg.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.cfg.qt }} windows-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.cfg.qt }} windows-latest)"
        id: set-outputs

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ matrix.cfg.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.set-outputs.outputs.dependencies != 'nil'

      - name: Cache Vulkan
        id: cache-vulkan
        uses: actions/cache@v1
        with:
          path: C:\VulkanSDK\${{ env.VULKAN_VER_FULL }}
          key: vulkan-${{ env.VULKAN_VER_FULL }}
        if: matrix.cfg.qt == env.QT6

      - name: Setup Vulkan(windows)
        run: |
           Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VER_FULL}/windows/VulkanSDK-${env:VULKAN_VER_FULL}-Installer.exe" -OutFile VulkanSDK.exe
           $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
           $installer.WaitForExit();
        if: matrix.cfg.qt == env.QT6 && !steps.cache-vulkan.outputs.cache-hit

      - name: Set vulkan sdk variable(windows)
        run: echo "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VER_FULL}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        if: matrix.cfg.qt == env.QT6

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Create build directory
        run: cmake -E make_directory "build"

      - run: cmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/ext/vcpkg/scripts/buildsystems/vcpkg.cmake
        env:
          CC: cl
          CXX: cl

      - run: cmake --build build

      - name: Set path to QtPiDeckCommon library
        run: Get-Location | % { echo "$_\QtPiDeckCommon" } | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        working-directory: build

      - name: Test project
        run: ctest --output-on-failure
        working-directory: build
        env:
          LD_LIBRARY_PATH: ./QtPiDeckCommon

  mac-test:
    needs: [mac-jobs-generator]
    runs-on: macos-latest
    strategy:
      matrix: ${{fromJSON(needs.mac-jobs-generator.outputs.job-matrix)}}
    
    name: Qt${{ matrix.cfg.qt }} - clang[macos]

    steps:
      - uses: lukka/get-cmake@latest

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: macos-QtCache-${{ matrix.cfg.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          version: '${{ matrix.cfg.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.cfg.qt }} macos-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.cfg.qt }} macos-latest)"
        id: set-outputs

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ matrix.cfg.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.set-outputs.outputs.dependencies != 'nil'

      - name: Update llvm-clang
        run: |
          brew update
          brew upgrade llvm

      - name: Create build directory
        run: cmake -E make_directory "build"

      - run: cmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/ext/vcpkg/scripts/buildsystems/vcpkg.cmake
        env:
          CC: /usr/local/opt/llvm/bin/clang
          CXX: /usr/local/opt/llvm/bin/clang++

      - run: cmake --build build

      - name: Test project
        run: ctest --output-on-failure
        working-directory: build
        env:
          LD_LIBRARY_PATH: ./QtPiDeckCommon

  code-checks-generator:
    needs: [ubuntu-test]
    runs-on: ubuntu-latest
    outputs:
      job-matrix: ${{ steps.set-matrix.outputs.job-matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=job-matrix::{\"cfg\":[${uqpi}, ${uq5}, ${uq6}]}"
        env:
          uqpi: '{"os":"ubuntu","qt":"${{ env.QTPI }}"}'
          uq5: '{"os":"ubuntu","qt":"${{ env.QT5 }}"}'
          uq6: '{"os":"ubuntu","qt":"${{ env.QT6 }}"}'

  code-coverage:
    needs: [code-checks-generator]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.code-checks-generator.outputs.job-matrix)}}
    env:
      clang: "clang-12"
      clangpp: "clang++-12"
      triplet: "x64-linux"

    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ubuntu-QtCache-${{ matrix.cfg.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          version: '${{ matrix.cfg.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.cfg.qt }} ubuntu-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.cfg.qt }} ubuntu-latest)"
        id: set-outputs

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ env.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.set-outputs.outputs.dependencies != 'nil'

      - name: Install additional Qt6 dependencies
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${VULKAN_VER}-focal.list https://packages.lunarg.com/vulkan/${VULKAN_VER}/lunarg-vulkan-${VULKAN_VER}-focal.list
          sudo apt update
          sudo apt install
          sudo apt install vulkan-sdk libxkbcommon-dev -y
        if: matrix.cfg.qt == env.QT6

      - name: Install llvm
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 12
          sudo apt-get install -y llvm-12 binutils-gold

      - uses: lukka/get-cmake@latest

      - name: Create build directory
        run: cmake -E make_directory "build"

      - name: Run cmake
        run: cmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/ext/vcpkg/scripts/buildsystems/vcpkg.cmake -DCODECOV=ON -DCMAKE_BUILD_TYPE=Debug
        env:
          CC: ${{ env.clang }}
          CXX: ${{ env.clangpp }}

      - run: cmake --build build

      - run: mkdir coverage

      - name: Test project
        run: ctest --output-on-failure
        working-directory: build
        env:
          LLVM_PROFILE_FILE: ${{ github.workspace }}/coverage/%p.profraw

      - run: ls coverage -lh

      - run: llvm-profdata-12 merge *.profraw -o coverage.profdata # -sparse
        working-directory: coverage

      - run: find ${{ github.workspace }}/build/Tests/ -type f -executable

      - name: Prepare report
        run: |
          llvm-cov-12 show \
          $(find ${{ github.workspace }}/build/ -type f \( -executable -and -name '*Tests' \) -or -name '*.o' | sed ':a; N; $!ba; s/\n/ -object /g') \
          -ignore-filename-regex="$(find ../QtPiDeckCommon/ \( -name '*.cpp' -or -name '*.hpp' -or -name '*.inl' \) -exec awk '/NOCOVERAGE/ {print FILENAME} {nextfile;}' {} + | sed 's|^.*QtPiDeckCommon/||;s/\./\\./' | sed ':a; N; $!ba; s/\n/|/g')" \
          -instr-profile=coverage.profdata --show-branches=count -show-line-counts -ignore-filename-regex='Tests' > coverage.txt
        working-directory: coverage

      - run: cat coverage.txt  | grep -A3 '\.cpp:'
        working-directory: coverage

      - uses: codecov/codecov-action@v2
        with:
          files: coverage/coverage.txt
          fail_ci_if_error: true

  clang-tidy:
    if: github.event_name == 'pull_request'
    needs: [code-checks-generator]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.code-checks-generator.outputs.job-matrix)}}
    env: 
      clang: "clang-12"
      clangpp: "clang++-12"
      clangtidy: "clang-tidy-12"
      triplet: "x64-linux"
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ubuntu-QtCache-${{ matrix.cfg.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          modules: ${{ matrix.cfg.qt == env.QT6 && 'qtwebsockets' || '' }}
          version: '${{ matrix.cfg.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.cfg.qt }} ubuntu-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.cfg.qt }} ubuntu-latest)"
        id: set-outputs

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ env.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.set-outputs.outputs.dependencies != 'nil'

      - name: Install additional Qt6 dependencies
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${VULKAN_VER}-focal.list https://packages.lunarg.com/vulkan/${VULKAN_VER}/lunarg-vulkan-${VULKAN_VER}-focal.list
          sudo apt update
          sudo apt install
          sudo apt install vulkan-sdk libxkbcommon-dev -y
        if: matrix.cfg.qt == env.QT6

      - uses: lukka/get-cmake@latest

      - run: sudo apt-get install -y ${clang} ${clangtidy}

      - name: Create build directory
        run: cmake -E make_directory "build"

      - run: cmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/ext/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        env:
          CC: ${{ env.clang }}
          CXX: ${{ env.clangpp }}

      - run: cmake --build build

      - run: mkdir clang-tidy-reports

      - name: Generate reports
        run: | 
          git diff --name-only $(git merge-base origin/master HEAD) HEAD | 
          grep '\.cpp$' |
          xargs -P2 -I% bash -c 'v=%; grep -q -e ".*\"file\":.*%" build/compile_commands.json && ${clangtidy} -p build --config-file=${{ github.workspace }}/.clang-tidy % > clang-tidy-reports/${v//\//.}.txt || true'

      - run: find clang-tidy-reports -name '*.txt' -empty -exec rm -v {} \; 

      - run: echo ::set-output name=count::$(find clang-tidy-reports -name '*.txt' | wc -l)
        id: reports-number

      - name: Export report
        uses: actions/upload-artifact@v2
        with:
          name: clang-tidy-reports-${{ matrix.cfg.qt }}
          path: clang-tidy-reports
        if: steps.reports-number.outputs.count != 0

      - name: Fail if clang-tidy found something
        if: steps.reports-number.outputs.count != 0
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('clang-tidy detected errors. Check job artifacts')

  done:
    if: github.event_name == 'pull_request'
    needs: [clang-tidy, code-coverage, win-test, mac-test]
    runs-on: ubuntu-latest
    steps:
      - run: echo "DONE"
